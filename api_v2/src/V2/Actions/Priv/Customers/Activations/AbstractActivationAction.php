<?php


namespace Api\V2\Actions\Priv\Customers\Activations;


use Api\Infrastructure\Pagination;
use Api\V2\Actions\Action;
use envPHP\service\Customer\Activation;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Log\LoggerInterface;

abstract  class AbstractActivationAction extends Action
{
    protected $pagination = [
        'records_per_page' => 50,
        'page_no' => 1,
    ];
    protected $services;
    function __construct(LoggerInterface $logger, Activation $s)
    {
        $this->services = $s;
        parent::__construct($logger);
    }
    function respondWithDataPagination(array $data): Response
    {
        $this->replaceQueryParams($this->pagination);
        $pagination = new Pagination($data, $this->pagination['records_per_page']);
        return $this->respondWithData($pagination->getPage($this->pagination['page_no']), [
            'pagination' => [
                'page_no' => (int) $this->pagination['page_no'],
                'records_per_page' => (int) $this->pagination['records_per_page'],
                'total_pages' => $pagination->getTotalPages(),
                'total_records' => $pagination->getTotalRecords(),
            ]
        ]);
    }
    function __invoke(Request $request, Response $response, $args): Response
    {
        return parent::__invoke($request, $response, $args); // TODO: Change the autogenerated stub
    }
    function fillArray($fillable_arr, $template_arr) {
        $arr = [];
        foreach ($template_arr as $k=>$v) {
            $arr[$k] = isset($fillable_arr[$k]) ? $fillable_arr[$k] : $v;
        }
        return $arr;
    }

}